#https://colab.research.google.com/drive/1MPE4ofOSJVvSuFRuW5mYmz5Rc-cJ-vSH?usp=sharing 

https://colab.research.google.com/drive/10X0KCXFwsLPLh2P-ohuhkzUtiiu1cEa-?usp=sharing











Master




Traffic —————————————————————————




import RPi.GPIO as GPIO

import time

import random




# Set up GPIO mode

GPIO.setmode(GPIO.BOARD)




# Define GPIO pins for the traffic lights

GREEN_PINS = [13, 11, 32, 15]

YELLOW_PINS = [16, 18, 22, 29]

RED_PINS = [31, 37, 19, 21]




# Setup and initialize all pins

for pin_set in [GREEN_PINS, YELLOW_PINS, RED_PINS]:

    for pin in pin_set:

        GPIO.setup(pin, GPIO.OUT)

        print(pin)

        GPIO.output(pin, GPIO.LOW)




n = 4  # Number of traffic lights




while True:

    # Generate random timings and create index list

    l = [random.randint(0, 30) for _ in range(n)]

    lI = list(range(n))

    print(l, lI)




    # Sort timings in descending order

    for i in range(n-1):

        for j in range(n-i-1):

            if l[j] < l[j+1]:

                l[j], l[j+1] = l[j+1], l[j]

                lI[j], lI[j+1] = lI[j+1], lI[j]

    print(l, lI)




    # Convert timings to seconds

    t = [i * 0.5 for i in l]




    # Control traffic lights

    for i in range(n):

        # Set all other lights to red

        for j in range(n):

            if j != i:

                GPIO.output(RED_PINS[lI[j]], GPIO.HIGH)

                print(lI[j], t[j] * 0.1, "RED")




        # Green light phase

        GPIO.output(RED_PINS[lI[i]], GPIO.LOW)

        GPIO.output(GREEN_PINS[lI[i]], GPIO.HIGH)

        print(lI[i], t[i] * 0.9, "Green")

        time.sleep(t[i] * 0.9)




        # Yellow light phase

        GPIO.output(GREEN_PINS[lI[i]], GPIO.LOW)

        GPIO.output(YELLOW_PINS[lI[i]], GPIO.HIGH)

        print(lI[i], t[i] * 0.1, "Yellow")

        time.sleep(t[i] * 0.1)




        # Turn off yellow light

        GPIO.output(YELLOW_PINS[lI[i]], GPIO.LOW)




Smart Home ——————————————————————————




import RPi.GPIO as GPIO

import time

import random




# GPIO Mode (BOARD / BCM)

GPIO.setmode(GPIO.BCM)

GPIO.setwarnings(False)




# Set GPIO Pins

GPIO_TRIGGER = 4

GPIO_ECHO = 17

LED_PIN = 23

LED1_PIN = 24




# Set GPIO direction (IN / OUT)

GPIO.setup(GPIO_TRIGGER, GPIO.OUT)

GPIO.setup(GPIO_ECHO, GPIO.IN)

GPIO.setup(LED_PIN, GPIO.OUT)

GPIO.setup(LED1_PIN, GPIO.OUT)




def distance():

    # Set Trigger to HIGH

    GPIO.output(GPIO_TRIGGER, GPIO.HIGH)

    

    # Set Trigger after 0.01ms to LOW

    time.sleep(0.00001)

    GPIO.output(GPIO_TRIGGER, GPIO.LOW)

    

    # Save StartTime

    while GPIO.input(GPIO_ECHO) == 0:

        StartTime = time.time()

    

    # Save time of arrival

    while GPIO.input(GPIO_ECHO) == 1:

        StopTime = time.time()

    

    # Time difference between start and arrival

    TimeElapsed = StopTime - StartTime

    

    # Calculate distance (multiply with the sonic speed (34300 cm/s)

    # and divide by 2, because there and back)

    distance = (TimeElapsed * 34300) / 2

    

    return distance




if __name__ == '__main__':

    while True:

        dist = distance()

        print(f"Measured Distance = {dist:.1f} cm")

        

        if dist < 17.5:

            print("Human detected")

            temp = random.randrange(20, 30)

            print(f"Temp: {temp}")

            GPIO.output(LED_PIN, GPIO.HIGH)

            

            if temp > 25:

                print("AC is on")

                GPIO.output(LED1_PIN, GPIO.HIGH)

            else:

                GPIO.output(LED1_PIN, GPIO.LOW)

                print("AC is off")

        else:

            GPIO.output(LED_PIN, GPIO.LOW)

            GPIO.output(LED1_PIN, GPIO.LOW)

            print("Human exited")

        

        time.sleep(1)




Smart Mat —————————————————————————




import RPi.GPIO as GPIO

import time

import random




# GPIO Mode (BOARD / BCM)

GPIO.setmode(GPIO.BCM)

GPIO.setwarnings(False)




# Set GPIO Pins

GPIO_TRIGGER = 4

GPIO_ECHO = 17

LED_PIN = 23




# Set GPIO direction (IN / OUT)

GPIO.setup(GPIO_TRIGGER, GPIO.OUT)

GPIO.setup(GPIO_ECHO, GPIO.IN)

GPIO.setup(LED_PIN, GPIO.OUT)




def distance():

    # Set Trigger to HIGH

    GPIO.output(GPIO_TRIGGER, GPIO.HIGH)

    

    # Set Trigger after 0.01ms to LOW

    time.sleep(0.00001)

    GPIO.output(GPIO_TRIGGER, GPIO.LOW)

    

    # Save StartTime

    while GPIO.input(GPIO_ECHO) == 0:

        StartTime = time.time()

    

    # Save time of arrival

    while GPIO.input(GPIO_ECHO) == 1:

        StopTime = time.time()

    

    # Time difference between start and arrival

    TimeElapsed = StopTime - StartTime

    

    # Calculate distance (multiply with the sonic speed (34300 cm/s)

    # and divide by 2, because there and back)

    distance = (TimeElapsed * 34300) / 2

    

    return distance




if __name__ == '__main__':

    while True:

        dist = distance()

        print(f"Measured Distance for ultra1 = {dist:.1f} cm")

        

        # Simulated distances for other ultrasonic sensors

        ultra2 = random.randrange(5, 20)

        print(f"Measured Distance for ultra2 = {ultra2:.1f} cm")

        ultra3 = random.randrange(5, 20)

        print(f"Measured Distance for ultra3 = {ultra3:.1f} cm")

        ultra4 = random.randrange(5, 20)

        print(f"Measured Distance for ultra4 = {ultra4:.1f} cm")

        

        if dist < 10 or ultra2 < 10 or ultra3 < 10 or ultra4 < 10:

            print("Human detected")

            GPIO.output(LED_PIN, GPIO.HIGH)

        else:

            GPIO.output(LED_PIN, GPIO.LOW)

            print("Human exited")

        

        time.sleep(1)





DHT:

Exp1

import Adafruit_DHT
from gpiozero import Buzzer
from time import sleep


buzzer = Buzzer(17)
# Sensor should be set to Adafruit_DHT.DHT11,
# Adafruit_DHT.DHT11, or Adafruit_DHT.AM2302.
sensor = Adafruit_DHT.DHT11

# Example using a Beaglebone Black with DHT sensor
# connected to pin P8_11.
#pin = 'P8_11'

# Example using a Raspberry Pi with DHT sensor
# connected to GPIO4.
pin = 4

# Try to grab a sensor reading.  Use the read_retry method which will retry up
# to 15 times to get a sensor reading (waiting 2 seconds between each retry).
while True:
    humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)
    if humidity is not None and temperature is not None:
        print('Temp={0:0.1f}*C  Humidity={1:0.1f}%'.format(temperature, humidity))
        if (temperature>27):
            buzzer.on()
            sleep(1)
            buzzer.off()
            sleep(1)
    else:
        print('Failed to get reading. Try again!')


CNN:

https://colab.research.google.com/drive/10X0KCXFwsLPLh2P-ohuhkzUtiiu1cEa-?usp=sharing

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, confusion_matrix
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Load and preprocess the MNIST dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Reshape the dataset to add the channel dimension (grayscale)
X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)

# Normalize pixel values to the range [0, 1]
X_train = X_train.astype('float32') / 255
X_test = X_test.astype('float32') / 255

# Convert labels to one-hot encoding
y_train_onehot = to_categorical(y_train, 10)
y_test_onehot = to_categorical(y_test, 10)

# Split the training data into 80:20 train-test sets
X_train, X_val, y_train_onehot, y_val_onehot, y_train, y_val = train_test_split(X_train, y_train_onehot, y_train, test_size=0.2, random_state=42)

# Build the CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train_onehot, epochs=10, batch_size=32, validation_data=(X_val, y_val_onehot))

# Evaluate the model on the test data
test_loss, test_accuracy = model.evaluate(X_test, y_test_onehot)
print(f"Test Accuracy: {test_accuracy * 100:.2f}%")

# Get predictions and calculate evaluation metrics
y_pred_onehot = model.predict(X_test)
y_pred = np.argmax(y_pred_onehot, axis=1)

# Accuracy, Precision, Recall, F1 score
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')

print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:")
print(conf_matrix)

# Plot Confusion Matrix
plt.figure(figsize=(8, 6))
plt.imshow(conf_matrix, cmap='Blues')
plt.title("Confusion Matrix")
plt.colorbar()
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

# Classification report
report = classification_report(y_test, y_pred)
print("\nClassification Report:")
print(report)

import random

# Function to display sample test images along with predicted and true labels
def display_sample_predictions(X_test, y_test, y_pred, num_samples=10):
    plt.figure(figsize=(15, 15))
    indices = random.sample(range(X_test.shape[0]), num_samples)  # Select random test image indices
    
    for i, index in enumerate(indices):
        plt.subplot(5, 5, i+1)
        plt.imshow(X_test[index].reshape(28, 28), cmap='gray')
        plt.title(f"True: {y_test[index]}\nPredicted: {y_pred[index]}")
        plt.axis('off')
    
    plt.tight_layout()
    plt.show()

# Display 10 sample test images with their predicted and true labels
display_sample_predictions(X_test, y_test, y_pred, num_samples=10)



-----------------------------------------------------------------------------------------
PICAM

• Connect PICAM to the raspberry pi to take pictures using the python 
program. 
• Run the command “pip3 install picamera” in the raspberry pi terminal. 
• Type the necessary code to capture images. 
• Take 3 photos with a pen and another 3 without the pen. 
• Augment the given photos to increase the accuracy of the model. 
• The dataset is ready. 

Code for capturing images in picam: 
 
from time import sleep 
from picamera import PiCamera 
 
camera = PiCamera() 
camera.resolution = (1024, 768) 
camera.start_preview() 
# Camera warm-up time 
sleep(2) 
camera.capture('foo.jpg')


Code for image augmentation: 
 
import os 
from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img 
import numpy as np 
 
# Paths to the folders containing pen and no_pen images 
pen_dir = 'pen' 
no_pen_dir = 'no_pen' 
output_dir = 'output' 
 
# ImageDataGenerator for augmentations 
datagen = ImageDataGenerator( 
    rotation_range=30, 
    width_shift_range=0.2, 
    height_shift_range=0.2, 
    shear_range=0.2, 
    zoom_range=0.2, 
    horizontal_flip=True, 
    fill_mode='nearest' 
) 
 
# Function to augment and save images 
def augment_images(input_dir, label, n_augmented=20): 
    for img_file in os.listdir(input_dir): 
        img_path = os.path.join(input_dir, img_file) 
        img = load_img(img_path)  # Load image 
        x = img_to_array(img)  # Convert to numpy array 
        x = np.expand_dims(x, axis=0)  # Reshape for ImageDataGenerator 
 
        i = 0 
        for batch in datagen.flow(x, batch_size=1, save_to_dir=output_dir, save_prefix=label, save_format='jpg'): 
            i += 1 
            if i >= n_augmented: 
                break  # Stop after creating specified number of augmented images 
 
# Create augmented images for each class 
augment_images(pen_dir, 'pen', n_augmented=40) 
augment_images(no_pen_dir, 'no_pen', n_augmented=40)


(ii) Binary Classification 
 
Code for training the model: 
 
import os 
import tensorflow as tf 
from tensorflow.keras.preprocessing.image import ImageDataGenerator 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout 
from tensorflow.keras.optimizers import Adam 
from sklearn.metrics import accuracy_score, precision_score, recall_score 
 
# Paths to the main dataset directory (where the augmented images are stored) 
data_dir = 'dataset' 
 
# Image dimensions and other parameters 
img_height, img_width = 480, 640  # Adjust based on your images 
batch_size = 8 
epochs = 15 
 
# ImageDataGenerator with only rescaling (no augmentation) 
datagen = ImageDataGenerator( 
    rescale=1.0/255,  # Only rescale, no additional augmentation 
    validation_split=0.2  # 80% training, 20% validation 
) 
 
# Training generator (80% of the data) 
train_generator = datagen.flow_from_directory( 
    data_dir, 
    target_size=(img_height, img_width), 
    batch_size=batch_size, 
    class_mode='binary', 
    subset='training'  # Use the training split 
) 
 
# Validation generator (20% of the data) 
val_generator = datagen.flow_from_directory( 
    data_dir, 
    target_size=(img_height, img_width), 
    batch_size=batch_size, 
    class_mode='binary', 
    subset='validation'  # Use the validation split 
) 
 
print("Finished the data preparation.")

model = Sequential([ 
    Conv2D(32, (3, 3), activation='relu', input_shape=(img_height, img_width, 3)), 
    MaxPooling2D(pool_size=(2, 2)), 
     
    Conv2D(64, (3, 3), activation='relu'), 
    MaxPooling2D(pool_size=(2, 2)), 
     
    Conv2D(128, (3, 3), activation='relu'), 
    MaxPooling2D(pool_size=(2, 2)), 
     
    Flatten(), 
    Dense(128, activation='relu'), 
    Dropout(0.5), 
    Dense(1, activation='sigmoid')  # Binary output layer 
]) 
 
print("Finished creating the model.") 
 
model.compile( 
    optimizer=Adam(learning_rate=0.001), 
    loss='binary_crossentropy', 
    metrics=['accuracy'] 
) 
 
print("Finished compiling the model.") 
 
history = model.fit( 
    train_generator, 
    steps_per_epoch=train_generator.samples // batch_size, 
    validation_data=val_generator, 
    validation_steps=val_generator.samples // batch_size, 
    epochs=epochs 
) 
 
print("Finished training the model.") 
 
# Get predictions and true labels from the validation generator 
val_generator.reset() 
predictions = model.predict(val_generator) 
predicted_classes = (predictions > 0.5).astype("int32")  # Convert probabilities to binary (0 or 1) 
 
# True labels 
true_classes = val_generator.classes  # The true labels in the validation set 
 
# Calculate accuracy, precision, and recall 
accuracy = accuracy_score(true_classes, predicted_classes) 


precision = precision_score(true_classes, predicted_classes) 
recall = recall_score(true_classes, predicted_classes) 
 
print(f'Accuracy: {accuracy * 100:.2f}%') 
print(f'Precision: {precision * 100:.2f}%') 
print(f'Recall: {recall * 100:.2f}%') 
 
model.save('pen_classifier_model.h5')


Code for testing with a sample image: 
 
import numpy as np 
from tensorflow.keras.models import load_model 
from tensorflow.keras.preprocessing import image 
import matplotlib.pyplot as plt 
 
# Load the saved model 
model = load_model('pen_classifier_model.h5')  # Update with your model's path 
 
# Path to your custom image 
img_path = 'dataset/pen/pen_0_199.jpg' 
 
# Load the image with target size matching the input shape of your model 
img_height, img_width = 480, 640  # Same dimensions used during training 
img = image.load_img(img_path, target_size=(img_height, img_width)) 
 
# Convert the image to a numpy array and add a batch dimension 
img_array = image.img_to_array(img) 
img_array = np.expand_dims(img_array, axis=0) 
 
# Rescale pixel values (must match the rescale factor you used during training) 
img_array = img_array / 255.0 
 
# Make a prediction 
prediction = model.predict(img_array) 
predicted_class = (prediction > 0.5).astype("int32")[0][0]  # Convert to binary output (0 or 1) 
 
# Map the prediction to class labels 
label = "Pen" if predicted_class == 1 else "No Pen" 
 
# Display the result 
print(f"The model predicts: {label}") 
 
# Optionally, show the image with the prediction 
plt.imshow(img) 
plt.title(f"Prediction: {label}") 
plt.axis("off") 
plt.show()


YOLOV5
https://colab.research.google.com/drive/1UclBEfHSkdr43_EJPh4Ml1bn5WTs5a2u?usp=sharing


picam with YoloV5

https://docs.ultralytics.com/guides/raspberry-pi/#set-up-ultralytics

https://dagshub.com/Ultralytics/ultralytics/pulls/6666/files?page=0&path=docs%2Fen%2Fguides%2Fraspberry-pi.md


Install

sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get autoremove -y

cd ~
git clone https://github.com/Ultralytics/yolov5.git

cd ~/yolov5
pip3 install -r requirements.txt

#pip3 uninstall torch torchvision
#pip3 install torch==1.11.0 torchvision==0.12.0


sudo nano ~/yolov5/detect.py

To enable TCP streams via SSH or the CLI, minor modifications are needed in detect.py.

 1) Open detect.py:

    sudo nano ~/yolov5/detect.py

 2) Find and modify the is_url line to accept TCP streams:

    is_url = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://', 'tcp://'))

 3) Comment out the view_img line:

    # view_img = check_imshow(warn=True)

  4) Save and exit:

    CTRL + O -> ENTER -> CTRL + X


Another Terminal:

Start the TCP stream:

libcamera-vid -n -t 0 --width 1280 --height 960 --framerate 1 --inline --listen -o tcp://127.0.0.1:8888


Another Terminal:

cd ~/yolov5
python3 detect.py --source=tcp://127.0.0.1:8888



yoloV8:
from ultralytics import YOLO

model = YOLO('yolov8n.pt')
results = model('tcp://127.0.0.1:8888', stream=True)

while True:
    for result in results:
        boxes = result.boxes
        probs = result.probs

-------------------------------------------------------------

Line Following Smart Car

#define LT_R !digitalRead(10) 
#define LT_M !digitalRead(4) 
#define LT_L !digitalRead(2) 
#define ENA 5 
#define ENB 6 
#define IN1 7 
#define IN2 8 
#define IN3 9 
#define IN4 11 
#define carSpeed 150 
 
void forward(){ 
  analogWrite(ENA, carSpeed); 
  analogWrite(ENB, carSpeed); 
  digitalWrite(IN1, HIGH); 
  digitalWrite(IN2, LOW); 
  digitalWrite(IN3, LOW); 
  digitalWrite(IN4, HIGH); 
  Serial.println("go forward!"); 
} 
 
void back(){ 
  analogWrite(ENA, carSpeed); 
  analogWrite(ENB, carSpeed); 
  digitalWrite(IN1, LOW); 
  digitalWrite(IN2, HIGH); 
  digitalWrite(IN3, HIGH); 
  digitalWrite(IN4, LOW); 
  Serial.println("go back!"); 
}


void left(){ 
  analogWrite(ENA, carSpeed); 
  analogWrite(ENB, carSpeed); 
  digitalWrite(IN1, LOW); 
  digitalWrite(IN2, HIGH); 
  digitalWrite(IN3, LOW); 
  digitalWrite(IN4, HIGH); 
  Serial.println("go left!"); 
} 
 
void right(){ 
  analogWrite(ENA, carSpeed); 
  analogWrite(ENB, carSpeed); 
  digitalWrite(IN1, HIGH); 
  digitalWrite(IN2, LOW); 
  digitalWrite(IN3, HIGH); 
  digitalWrite(IN4, LOW);  
  Serial.println("go right!"); 
}  
 
void stop(){ 
   digitalWrite(ENA, LOW); 
   digitalWrite(ENB, LOW); 
   Serial.println("Stop!"); 
}  
 
void setup(){ 
  Serial.begin(9600); 
  pinMode(LT_R,INPUT); 
  pinMode(LT_M,INPUT); 
  pinMode(LT_L,INPUT); 
}


void loop() { 
  if(LT_M){ 
    forward(); 
  } 
  else if(LT_R) {  
    right(); 
    while(LT_R);                              
  }    
  else if(LT_L) { 
    left(); 
    while(LT_L);   
  } 
}

-------------------------------------------------------------

Obstacle Avoidance - smart car

 
#include <Servo.h>  //servo library 
Servo myservo;      // create servo object to control servo 
 
int Echo = A4;   
int Trig = A5;  
 
#define ENA 5 
#define ENB 6 
#define IN1 7 
#define IN2 8 
#define IN3 9 
#define IN4 11 
#define carSpeed 150 
int rightDistance = 0, leftDistance = 0, middleDistance = 0; 
 
void forward(){  
  analogWrite(ENA, carSpeed); 
  analogWrite(ENB, carSpeed); 
  digitalWrite(IN1, HIGH); 
  digitalWrite(IN2, LOW); 
  digitalWrite(IN3, LOW); 
  digitalWrite(IN4, HIGH); 
  Serial.println("Forward"); 
} 
 
void back() { 
  analogWrite(ENA, carSpeed); 
  analogWrite(ENB, carSpeed); 
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH); 
  digitalWrite(IN3, HIGH); 
  digitalWrite(IN4, LOW); 
  Serial.println("Back"); 
} 
 
void left() { 
  analogWrite(ENA, carSpeed); 
  analogWrite(ENB, carSpeed); 
  digitalWrite(IN1, LOW); 
  digitalWrite(IN2, HIGH); 
  digitalWrite(IN3, LOW); 
  digitalWrite(IN4, HIGH);  
  Serial.println("Left"); 
} 
 
void right() { 
  analogWrite(ENA, carSpeed); 
  analogWrite(ENB, carSpeed); 
  digitalWrite(IN1, HIGH); 
  digitalWrite(IN2, LOW); 
  digitalWrite(IN3, HIGH); 
  digitalWrite(IN4, LOW); 
  Serial.println("Right"); 
} 
 
void stop() { 
  digitalWrite(ENA, LOW); 
  digitalWrite(ENB, LOW); 
  Serial.println("Stop!"); 
} 

//Ultrasonic distance measurement Sub function 
int Distance_test() { 
  digitalWrite(Trig, LOW);    
  delayMicroseconds(2); 
  digitalWrite(Trig, HIGH);   
  delayMicroseconds(20); 
  digitalWrite(Trig, LOW);    
  float Fdistance = pulseIn(Echo, HIGH);   
  Fdistance= Fdistance / 58;        
  return (int)Fdistance; 
}   
 
void setup() {  
  myservo.attach(3);  // attach servo on pin 3 to servo object 
  Serial.begin(9600);      
  pinMode(Echo, INPUT);     
  pinMode(Trig, OUTPUT);   
  pinMode(IN1, OUTPUT); 
  pinMode(IN2, OUTPUT); 
  pinMode(IN3, OUTPUT); 
  pinMode(IN4, OUTPUT); 
  pinMode(ENA, OUTPUT); 
  pinMode(ENB, OUTPUT); 
  stop(); 
}  
 
void loop() {  
    myservo.write(90);  //setservo position 
    delay(500);  
    middleDistance = Distance_test();
     if(middleDistance <= 20) {      
      stop(); 
      delay(500);                          
      myservo.write(10);           
      delay(1000);       
      rightDistance = Distance_test(); 
       
      delay(500); 
      myservo.write(90);               
      delay(1000);                                                   
      myservo.write(180);               
      delay(1000);  
      leftDistance = Distance_test(); 
       
      delay(500); 
      myservo.write(90);               
      delay(1000); 
      if(rightDistance > leftDistance) { 
        right(); 
        delay(360); 
      } 
      else if(rightDistance < leftDistance) { 
        left(); 
        delay(360); 
      } 
      else if((rightDistance <= 20) || (leftDistance <= 20)) { 
        back(); 
        delay(180); 
      } 
      else { 
        forward(); 
      }
  }   
    else { 
        forward(); 
    }                      
}





-------------------------------------------------------------

Smart Car -  Shapes

4. Code : 
 
(i) Square 
 
#define ENA 6 
#define IN3 9 
#define IN4 11 
#define ENB 5  
#define IN1 7 
#define IN2 8 
 
 
void setup() { 
  // put your setup code here, to run once: 
  pinMode(IN1, OUTPUT);     //set IO pin mode OUTPUT 
  pinMode(IN2, OUTPUT); 
  pinMode(ENB, OUTPUT); 
  digitalWrite(ENB, HIGH); 
  pinMode(IN3, OUTPUT);     //set IO pin mode OUTPUT 
  pinMode(IN4, OUTPUT); 
  pinMode(ENA, OUTPUT); 
  digitalWrite(ENA, HIGH); 
 
} 
 
void backward(float d){ 
   digitalWrite(IN1, HIGH); 
   digitalWrite(IN2, LOW); 
   digitalWrite(IN3, LOW); 
   digitalWrite(IN4, HIGH);  
   delay(d*1000);  
} 
 
void forward(float d){ 
   digitalWrite(IN1, LOW); 
   digitalWrite(IN2, HIGH); 
   digitalWrite(IN3, HIGH); 
   digitalWrite(IN4, LOW);  
   delay(d*1000);   
} 
 
void stopCar(){ 
  digitalWrite(IN1, LOW); 
  digitalWrite(IN2, LOW); 
  digitalWrite(IN3, LOW); 
  digitalWrite(IN4, LOW); 
  delay(1000); 
} 
 
void leftForward(float d){ 
    digitalWrite(IN3, HIGH); 
  digitalWrite(IN4, LOW);  //Right wheel turning forwards 
  delay(d*1000);   
} 
 
void loop() { 
  // put your main code here, to run repeatedly: 
  forward(1); 
  stopCar(); 
  leftForward(0.75); 
  stopCar(); 
} 
 
(ii) Rectangle: 
 
#define ENA 6 
#define IN3 9 
#define IN4 11 
#define ENB 5  
#define IN1 7 
#define IN2 8 
 
 
void setup() { 
  // put your setup code here, to run once: 
  pinMode(IN1, OUTPUT);     //set IO pin mode OUTPUT 
  pinMode(IN2, OUTPUT); 
  pinMode(ENB, OUTPUT); 
  digitalWrite(ENB, HIGH); 
  pinMode(IN3, OUTPUT);     //set IO pin mode OUTPUT 
  pinMode(IN4, OUTPUT); 
  pinMode(ENA, OUTPUT); 
  digitalWrite(ENA, HIGH); 
 
} 
 
void backward(float d){ 
   digitalWrite(IN1, HIGH); 
   digitalWrite(IN2, LOW); 
   digitalWrite(IN3, LOW); 
   digitalWrite(IN4, HIGH);  
   delay(d*1000);  
} 
 
 
void forward(float d){ 
   digitalWrite(IN1, LOW); 
   digitalWrite(IN2, HIGH); 
   digitalWrite(IN3, HIGH); 
   digitalWrite(IN4, LOW);  
   delay(d*1000);   
} 
 
void stopCar(){ 
  digitalWrite(IN1, LOW); 
  digitalWrite(IN2, LOW); 
  digitalWrite(IN3, LOW); 
  digitalWrite(IN4, LOW); 
  delay(750); 
} 
void rightForward(float d){ 
  digitalWrite(IN3, HIGH); 
  digitalWrite(IN4, LOW);  //Right wheel turning forwards 
  delay(d*1000);   
} 
 
void loop() { 
  // put your main code here, to run repeatedly: 
  forward(1); 
  stopCar(); 
  rightForward(0.75); 
  stopCar(); 
  forward(2); 
  stopCar(); 
  rightForward(0.75); 
  stopCar(); 
} 
(iii) Circle 
 
#define ENA 6 
#define IN3 9 
#define IN4 11 
#define ENB 5  
#define IN1 7 
#define IN2 8 
 
 
void setup() { 
  // put your setup code here, to run once: 
  pinMode(IN1, OUTPUT);     //set IO pin mode OUTPUT 
  pinMode(IN2, OUTPUT); 
  pinMode(ENB, OUTPUT); 
  digitalWrite(ENB, HIGH); 
  pinMode(IN3, OUTPUT);     //set IO pin mode OUTPUT 
  pinMode(IN4, OUTPUT); 
  pinMode(ENA, OUTPUT); 
  digitalWrite(ENA, HIGH); 
 
} 
 
void backward(float d){ 
   digitalWrite(IN1, HIGH); 
   digitalWrite(IN2, LOW); 
   digitalWrite(IN3, LOW); 
   digitalWrite(IN4, HIGH);  
   delay(d*1000);  
} 
 
 
void forward(float d){ 
   digitalWrite(IN1, LOW); 
   digitalWrite(IN2, HIGH); 
   digitalWrite(IN3, HIGH); 
   digitalWrite(IN4, LOW);  
   delay(d*1000);   
} 
 
void stopCar(){ 
  digitalWrite(IN1, LOW); 
  digitalWrite(IN2, LOW); 
  digitalWrite(IN3, LOW); 
  digitalWrite(IN4, LOW); 
  delay(750); 
} 
 
void rightForward(float d){ 
  digitalWrite(IN3, HIGH); 
  digitalWrite(IN4, LOW);  //Right wheel turning forwards 
//  delay(d*1000);   
} 
 
void loop() { 
  // put your main code here, to run repeatedly: 
//  forward(1); 
//  stopCar(); 
  rightForward(0); 
} 
 
 
 
 
(iv) Triangle 
 
 
#define ENA 6 
#define IN3 9 
#define IN4 11 
#define ENB 5  
#define IN1 7 
#define IN2 8 
 
 
void setup() { 
  // put your setup code here, to run once: 
  pinMode(IN1, OUTPUT);     //set IO pin mode OUTPUT 
  pinMode(IN2, OUTPUT); 
  pinMode(ENB, OUTPUT); 
  digitalWrite(ENB, HIGH); 
  pinMode(IN3, OUTPUT);     //set IO pin mode OUTPUT 
  pinMode(IN4, OUTPUT); 
  pinMode(ENA, OUTPUT); 
  digitalWrite(ENA, HIGH); 
 
} 
 
void backward(float d){ 
   digitalWrite(IN1, HIGH); 
   digitalWrite(IN2, LOW); 
   digitalWrite(IN3, LOW); 
   digitalWrite(IN4, HIGH);  
   delay(d*1000);  
} 
 
void forward(float d){ 
   digitalWrite(IN1, LOW); 
   digitalWrite(IN2, HIGH); 
   digitalWrite(IN3, HIGH); 
   digitalWrite(IN4, LOW);  
   delay(d*1000);   
} 
 
void stopCar(){ 
  digitalWrite(IN1, LOW); 
  digitalWrite(IN2, LOW); 
  digitalWrite(IN3, LOW); 
  digitalWrite(IN4, LOW); 
  delay(750); 
} 
 
void rightForward(float d){ 
  digitalWrite(IN3, HIGH); 
  digitalWrite(IN4, LOW);  //Right wheel turning forwards 
  delay(d*1000);   
} 
 
void loop() { 
  // put your main code here, to run repeatedly: 
  forward(1); 
  stopCar(); 
  rightForward(1); 
} 


--------------------------------------------------